(function (VueRouter,Vue,_) {
'use strict';

var loginRoutes = [
    {
        path: '/login',
        name: 'login',
        //language=HTML
        component: {
            template: "\n                <p>login screen</p>\n            "
        }
    }
];

var AdminNavBarProps = {
    username: 'username'
};
var vm$1 = AdminNavBarProps;
var AdminNavBar = Vue.extend({
    props: _.values(vm$1),
    created: function () {
        this.username;
        console.log('admin nav bar created' + this.username);
    },
    //language=HTML
    template: "\n        <p>Hello {{ " + vm$1.username + " }} from Admin nav bar</p>\n    "
});

var vm = AdminNavBarProps;
var routes = [
    {
        path: "/admin/:" + vm.username,
        name: 'admin',
        props: true,
        component: {
            props: [vm.username],
            components: {
                'admin-nav-bar': AdminNavBar
            },
            //language=HTML
            template: "\n                <div>\n                    <admin-nav-bar :username=\"" + vm.username + "\"></admin-nav-bar>\n                </div>\n            "
        }
    }
];
var adminRoutes = routes;

var router = new VueRouter({});
router.addRoutes(loginRoutes);
router.addRoutes(adminRoutes);
var appRouter = router;

console.log('run');
var app = new Vue({
    data: {
        message: 'Welcome!'
    },
    components: {},
    router: appRouter
}).$mount('#app');

}(VueRouter,Vue,_));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9ob21lL2VyaWMvc2FuZGJveF9wcm9qZWN0cy90dV90cmFpbmluZ19tb2R1bGVzL3dlYmFwcC9hcHAvbG9naW4vbG9naW5fcm91dGUudHMiLCIvaG9tZS9lcmljL3NhbmRib3hfcHJvamVjdHMvdHVfdHJhaW5pbmdfbW9kdWxlcy93ZWJhcHAvYXBwL2FkbWluL2FkbWluX25hdl9iYXJfY29tcG9uZW50LnRzIiwiL2hvbWUvZXJpYy9zYW5kYm94X3Byb2plY3RzL3R1X3RyYWluaW5nX21vZHVsZXMvd2ViYXBwL2FwcC9hZG1pbi9hZG1pbl9yb3V0ZXMudHMiLCIvaG9tZS9lcmljL3NhbmRib3hfcHJvamVjdHMvdHVfdHJhaW5pbmdfbW9kdWxlcy93ZWJhcHAvYXBwL3JvdXRlci50cyIsIi9ob21lL2VyaWMvc2FuZGJveF9wcm9qZWN0cy90dV90cmFpbmluZ19tb2R1bGVzL3dlYmFwcC9hcHAvYXBwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Um91dGVDb25maWd9IGZyb20gJ3Z1ZS1yb3V0ZXIvdHlwZXMvcm91dGVyJztcblxuZXhwb3J0IGNvbnN0IGxvZ2luUm91dGVzOiBSb3V0ZUNvbmZpZ1tdID0gW1xuICAgIHtcbiAgICAgICAgcGF0aDogJy9sb2dpbicsXG4gICAgICAgIG5hbWU6ICdsb2dpbicsXG4gICAgICAgIC8vbGFuZ3VhZ2U9SFRNTFxuICAgICAgICBjb21wb25lbnQ6IHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiBgXG4gICAgICAgICAgICAgICAgPHA+bG9naW4gc2NyZWVuPC9wPlxuICAgICAgICAgICAgYFxuICAgICAgICB9XG4gICAgfVxuXTtcbiIsImltcG9ydCAqIGFzIFZ1ZSBmcm9tICd2dWUnO1xuaW1wb3J0ICogYXMgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBJQWRtaW5OYXZCYXJWTSB7XG4gICAgdXNlcm5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IEFkbWluTmF2QmFyUHJvcHM6IElBZG1pbk5hdkJhclZNID0ge1xuICAgIHVzZXJuYW1lOiAndXNlcm5hbWUnXG59O1xuXG5sZXQgdm0gPSBBZG1pbk5hdkJhclByb3BzO1xuZXhwb3J0IGNvbnN0IEFkbWluTmF2QmFyID0gVnVlLmV4dGVuZCh7XG4gICAgcHJvcHM6IF8udmFsdWVzKHZtKSxcbiAgICBjcmVhdGVkOiBmdW5jdGlvbiAodGhpczogSUFkbWluTmF2QmFyVk0gJiBWdWUpIHtcbiAgICAgICAgdGhpcy51c2VybmFtZTtcbiAgICAgICAgY29uc29sZS5sb2coJ2FkbWluIG5hdiBiYXIgY3JlYXRlZCcgKyB0aGlzLnVzZXJuYW1lKTtcbiAgICB9LFxuICAgIC8vbGFuZ3VhZ2U9SFRNTFxuICAgIHRlbXBsYXRlOiBgXG4gICAgICAgIDxwPkhlbGxvIHt7ICR7dm0udXNlcm5hbWV9IH19IGZyb20gQWRtaW4gbmF2IGJhcjwvcD5cbiAgICBgXG59KTsiLCJpbXBvcnQge1JvdXRlQ29uZmlnfSBmcm9tICd2dWUtcm91dGVyL3R5cGVzL3JvdXRlcic7XG5pbXBvcnQge0FkbWluTmF2QmFyLCBBZG1pbk5hdkJhclByb3BzfSBmcm9tICcuL2FkbWluX25hdl9iYXJfY29tcG9uZW50JztcblxubGV0IHZtID0gQWRtaW5OYXZCYXJQcm9wcztcbmxldCByb3V0ZXM6IFJvdXRlQ29uZmlnW10gPSBbXG4gICAge1xuICAgICAgICBwYXRoOiBgL2FkbWluLzoke3ZtLnVzZXJuYW1lfWAsXG4gICAgICAgIG5hbWU6ICdhZG1pbicsXG4gICAgICAgIHByb3BzOiB0cnVlLFxuICAgICAgICBjb21wb25lbnQ6IHtcbiAgICAgICAgICAgIHByb3BzOiBbdm0udXNlcm5hbWVdLFxuICAgICAgICAgICAgY29tcG9uZW50czoge1xuICAgICAgICAgICAgICAgICdhZG1pbi1uYXYtYmFyJzogQWRtaW5OYXZCYXJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvL2xhbmd1YWdlPUhUTUxcbiAgICAgICAgICAgIHRlbXBsYXRlOiBgXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPGFkbWluLW5hdi1iYXIgOnVzZXJuYW1lPVwiJHt2bS51c2VybmFtZX1cIj48L2FkbWluLW5hdi1iYXI+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICBgXG4gICAgICAgIH1cbiAgICB9XG5dO1xuXG5cbmV4cG9ydCBjb25zdCBhZG1pblJvdXRlcyA9IHJvdXRlcztcbiIsImltcG9ydCAqIGFzIFZ1ZVJvdXRlciBmcm9tICd2dWUtcm91dGVyJztcbmltcG9ydCB7bG9naW5Sb3V0ZXN9IGZyb20gJy4vbG9naW4vbG9naW5fcm91dGUnO1xuaW1wb3J0IHthZG1pblJvdXRlc30gZnJvbSAnLi9hZG1pbi9hZG1pbl9yb3V0ZXMnO1xuXG5sZXQgcm91dGVyID0gbmV3IFZ1ZVJvdXRlcih7fSk7XG5cbnJvdXRlci5hZGRSb3V0ZXMobG9naW5Sb3V0ZXMpO1xucm91dGVyLmFkZFJvdXRlcyhhZG1pblJvdXRlcyk7XG5cbmV4cG9ydCBjb25zdCBhcHBSb3V0ZXIgPSByb3V0ZXI7XG4iLCJpbXBvcnQge2FwcFJvdXRlcn0gZnJvbSAnLi9yb3V0ZXInO1xuaW1wb3J0ICogYXMgVnVlIGZyb20gJ3Z1ZSc7XG5cbmNvbnNvbGUubG9nKCdydW4nKTtcbmxldCBhcHAgPSBuZXcgVnVlKHtcbiAgICBkYXRhOiB7XG4gICAgICAgIG1lc3NhZ2U6ICdXZWxjb21lISdcbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IHt9LFxuICAgIHJvdXRlcjogYXBwUm91dGVyXG59KS4kbW91bnQoJyNhcHAnKTsiXSwibmFtZXMiOlsidm0iLCJWdWUuZXh0ZW5kIiwiXy52YWx1ZXMiXSwibWFwcGluZ3MiOiI7OztBQUVPLElBQU0sV0FBVyxHQUFrQjtJQUN0QztRQUNJLElBQUksRUFBRSxRQUFRO1FBQ2QsSUFBSSxFQUFFLE9BQU87O1FBRWIsU0FBUyxFQUFFO1lBQ1AsUUFBUSxFQUFFLHFEQUVUO1NBQ0o7S0FDSjtDQUNKOztBQ05NLElBQU0sZ0JBQWdCLEdBQW1CO0lBQzVDLFFBQVEsRUFBRSxVQUFVO0NBQ3ZCLENBQUM7QUFFRixJQUFJQSxJQUFFLEdBQUcsZ0JBQWdCLENBQUM7QUFDMUIsQUFBTyxJQUFNLFdBQVcsR0FBR0MsVUFBVSxDQUFDO0lBQ2xDLEtBQUssRUFBRUMsUUFBUSxDQUFDRixJQUFFLENBQUM7SUFDbkIsT0FBTyxFQUFFO1FBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3hEOztJQUVELFFBQVEsRUFBRSwyQkFDUUEsSUFBRSxDQUFDLFFBQVEscUNBQzVCO0NBQ0osQ0FBQzs7QUNuQkYsSUFBSSxFQUFFLEdBQUcsZ0JBQWdCLENBQUM7QUFDMUIsSUFBSSxNQUFNLEdBQWtCO0lBQ3hCO1FBQ0ksSUFBSSxFQUFFLGFBQVcsRUFBRSxDQUFDLFFBQVU7UUFDOUIsSUFBSSxFQUFFLE9BQU87UUFDYixLQUFLLEVBQUUsSUFBSTtRQUNYLFNBQVMsRUFBRTtZQUNQLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7WUFDcEIsVUFBVSxFQUFFO2dCQUNSLGVBQWUsRUFBRSxXQUFXO2FBQy9COztZQUVELFFBQVEsRUFBRSw2RUFFMEIsRUFBRSxDQUFDLFFBQVEsOERBRTlDO1NBQ0o7S0FDSjtDQUNKLENBQUM7QUFHRixBQUFPLElBQU0sV0FBVyxHQUFHLE1BQU07O0FDckJqQyxJQUFJLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUUvQixNQUFNLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFOUIsQUFBTyxJQUFNLFNBQVMsR0FBRyxNQUFNOztBQ04vQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25CLElBQUksR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0lBQ2QsSUFBSSxFQUFFO1FBQ0YsT0FBTyxFQUFFLFVBQVU7S0FDdEI7SUFDRCxVQUFVLEVBQUUsRUFBRTtJQUNkLE1BQU0sRUFBRSxTQUFTO0NBQ3BCLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDOzs7OyJ9